plugins {
    id 'com.github.johnrengelman.shadow'
}

loom {
    forge {
        mixinConfig "artiferrium.mixins.json"
    }

    runs {
        client {
            client()
            setConfigName("Forge Client")
            ideConfigGenerated(true)
            runDir("run")

            property("fml.secureJarsEnabled", "false")
            property("forge.logging.markers", "REGISTRIES")
            property("forge.logging.console.level", "debug")
        }

    }
}

architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    forge "net.minecraftforge:forge:$rootProject.forge_version"

    modImplementation "dev.architectury:architectury-forge:$rootProject.architectury_api_version"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionForge')

    // TOML configuration support
    implementation 'org.tomlj:tomlj:1.1.0'
    implementation 'org.antlr:antlr4-runtime:4.7.2'
}

processResources {
    inputs.property 'version', project.version

    filesMatching('META-INF/mods.toml') {
        expand version: project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
    from(project(':common').sourceSets.main.output)
}

remapJar {
    input.set shadowJar.archiveFile
}
